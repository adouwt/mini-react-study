{"version":3,"file":"dist.js","mappings":"wsCASA,IAAIA,EAAiB,KACjBC,EAAU,KACVC,EAAc,KACdC,EAAY,KAmBVC,EAAU,SAAAC,GAAG,OAAIA,EAAIC,WAAW,KAAK,EACrCC,EAAa,SAAAF,GAAG,MAAY,aAARA,IAAuBD,EAAQC,EAAI,EACvDG,EAAQ,SAACC,EAAMC,GAAI,OAAK,SAAAL,GAAG,OAAII,EAAKJ,KAASK,EAAKL,EAAI,GACtDM,EAAS,SAACF,EAAMC,GAAI,OAAK,SAAAL,GAAG,QAAMA,KAAOK,EAAK,GACpD,SAASE,EAAUC,EAAKC,EAAWC,GAEjCC,OAAOC,KAAKH,GACTI,OAAOd,GACPc,QACC,SAAAb,GAAG,QACCA,KAAOU,IACTP,EAAMM,EAAWC,EAAjBP,CAA4BH,EAAI,IAEnCc,SAAQ,SAAAC,GACP,IAAMC,EAAYD,EACfE,cACAC,UAAU,GACbV,EAAIW,oBACFH,EACAP,EAAUM,GAEd,IAGFJ,OAAOC,KAAKH,GACTI,OAAOX,GACPW,OAAOP,EAAOG,EAAWC,IACzBI,SAAQ,SAAAC,GACPP,EAAIO,GAAQ,EACd,IAGFJ,OAAOC,KAAKF,GACTG,OAAOX,GACPW,OAAOV,EAAMM,EAAWC,IACxBI,SAAQ,SAAAC,GACPP,EAAIO,GAAQL,EAAUK,EACxB,IAGFJ,OAAOC,KAAKF,GACTG,OAAOd,GACPc,OAAOV,EAAMM,EAAWC,IACxBI,SAAQ,SAAAC,GACP,IAAMC,EAAYD,EACfE,cACAC,UAAU,GACbV,EAAIY,iBACFJ,EACAN,EAAUK,GAEd,GACJ,CACA,SAASM,EAAWC,GAClB,GAAIA,EAAJ,CAGA,IAAMC,EAAYD,EAAME,OAAOhB,IACP,cAApBc,EAAMG,WAA0C,MAAbH,EAAMd,IAC3Ce,EAAUG,YAAYJ,EAAMd,KACC,WAApBc,EAAMG,WAAuC,MAAbH,EAAMd,IAC/CD,EACEe,EAAMd,IACNc,EAAMK,UAAUC,MAChBN,EAAMM,OAEqB,aAApBN,EAAMG,WACfF,EAAUM,YAAYP,EAAMd,KAE9Ba,EAAWC,EAAMQ,OACjBT,EAAWC,EAAMS,QAdjB,CAeF,CAkEA,SAASC,EAAkBV,GAezB,GAbIA,EAAMd,MACRc,EAAMd,IA3KV,SAAmBc,GACjB,IAAMd,EAAqB,iBAAfc,EAAMW,KAA0BC,SAASC,eAAe,IAAMD,SAASE,cAAcd,EAAMW,MAKvG,OAHA1B,EAAUC,EAAK,CAAC,EAAGc,EAAMM,OAGlBpB,CACT,CAoKgB6B,CAAUf,IAtD1B,SAA2BgB,EAAUC,GAMnC,IALA,IAAIC,EAAQ,EACRC,EACAH,EAASX,WAAaW,EAASX,UAAUG,MACzCY,EAAc,KAEXF,EAAQD,EAASI,QAAsB,MAAZF,GAAkB,CAClD,IAAMG,EAAUL,EAASC,GACrBK,EAAW,KAETC,EAAWL,GAAYG,GAAWA,EAAQX,MAAQQ,EAASR,KAE7Da,IACFD,EAAW,CACTZ,KAAMQ,EAASR,KACfL,MAAOgB,EAAQhB,MACfpB,IAAKiC,EAASjC,IACdgB,OAAQc,EACRX,UAAWc,EACXhB,UAAW,WAGXmB,IAAYE,IACdD,EAAW,CACTZ,KAAMW,EAAQX,KACdL,MAAOgB,EAAQhB,MACfpB,IAAK,KACLgB,OAAQc,EACRX,UAAW,KACXF,UAAW,cAGXgB,IAAaK,IACfL,EAAShB,UAAY,WACrB3B,EAAUiD,KAAKN,IAGbA,IACFA,EAAWA,EAASV,SAGR,IAAVS,EACFF,EAASR,MAAQe,EACRD,IACTF,EAAYX,QAAUc,GAGxBH,EAAcG,EACdL,GACF,CACF,CAaEQ,CAAkB1B,EADDA,EAAMM,MAAMqB,UAI1B3B,EAAMQ,MACP,OAAOR,EAAMQ,MAGf,IADA,IAAIoB,EAAY5B,EACV4B,GAAU,CACd,GAAGA,EAAUnB,QACX,OAAOmB,EAAUnB,QAEnBmB,EAAYA,EAAU1B,MACxB,CAEF,CA9EA2B,qBAZA,SAASC,EAASC,GAEhB,IADA,IAAIC,GAAc,EACX3D,IAAmB2D,GACxB3D,EAAiBqC,EAAkBrC,GACnC2D,EAAcD,EAASE,gBAAkB,GAEvC5D,GAAkBC,IArFtBE,EAAUgB,QAAQO,GAClBA,EAAWzB,EAAQkC,OACnBjC,EAAcD,EACdA,EAAU,MAqFVuD,oBAAoBC,EACtB,IAiFA,IAAMI,EACY,SAACvB,EAAML,GAAuB,QAAA6B,EAAAC,UAAAf,OAAbM,EAAQ,IAAAU,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAARX,EAAQW,EAAA,GAAAF,UAAAE,GACvC,MAAO,CACL3B,KAAAA,EACAL,MAAKiC,EAAAA,EAAA,GACAjC,GAAK,IACRqB,SAAUA,EAASa,KAAI,SAAAhC,GACrB,MAAoB,WAAjBiC,EAAOjC,GACDA,EAEF,CACLG,KAAM,eACNL,MAAO,CACLoC,UAAWlC,EACXmB,SAAU,IAGhB,MAGN,EApBIO,EAtLN,SAAgBZ,EAASqB,GAQvBnE,EAAY,GACZH,EARAC,EAAU,CACRY,IAAKyD,EACLrC,MAAO,CACLqB,SAAU,CAACL,IAEbjB,UAAW9B,EAIf,EAoMMoE,EAAY/B,SAASgC,eAAe,QAEpCC,EAAc,SAAAC,GAClBC,EAASD,EAAEE,OAAOC,MACpB,EAEMF,EAAW,SAAAE,GACf,IAAM3B,EACJY,EAAA,WACEA,EAAA,SAAOgB,QAASL,EAAaI,MAAOA,IACpCf,EAAA,UAAI,SAAOe,IAGff,EAAiBZ,EAASqB,EAC5B,EAEAI,EAAS,Q","sources":["webpack://test/./src/index.jsx"],"sourcesContent":["function createDom(fiber) {\r\n  const dom = fiber.type === 'TEXT_ELEMENT' ? document.createTextNode(\"\") : document.createElement(fiber.type)\r\n\r\n  updateDom(dom, {}, fiber.props)\r\n\r\n\r\n  return dom\r\n}\r\n\r\nlet nextUnitOfWork = null\r\nlet wipRoot = null // 保存着对root fiber的引用\r\nlet currentRoot = null // 保存着当前页面对应的fiber tree\r\nlet deletions = null\r\nfunction render(element, container){\r\n  wipRoot = {\r\n    dom: container,\r\n    props: {\r\n      children: [element], // 此时的element还只是React.createElement函数创建的virtual dom树\r\n    },\r\n    alternate: currentRoot,\r\n  }\r\n  deletions = []\r\n  nextUnitOfWork = wipRoot\r\n}\r\nfunction commitRoot(){\r\n  deletions.forEach(commitWork)\r\n  commitWork(wipRoot.child)\r\n  currentRoot = wipRoot\r\n  wipRoot = null\r\n}\r\n\r\nconst isEvent = key => key.startsWith(\"on\")\r\nconst isProperty = key => key !== \"children\" && !isEvent(key)\r\nconst isNew = (prev, next) => key => prev[key] !== next[key]\r\nconst isGone = (prev, next) => key => !(key in next)\r\nfunction updateDom(dom, prevProps, nextProps) {\r\n  //Remove old or changed event listeners\r\n  Object.keys(prevProps)\r\n    .filter(isEvent)\r\n    .filter(\r\n      key =>\r\n        !(key in nextProps) ||\r\n        isNew(prevProps, nextProps)(key)\r\n    )\r\n    .forEach(name => {\r\n      const eventType = name\r\n        .toLowerCase()\r\n        .substring(2)\r\n      dom.removeEventListener(\r\n        eventType,\r\n        prevProps[name]\r\n      )\r\n    })\r\n\r\n  // Remove old properties\r\n  Object.keys(prevProps)\r\n    .filter(isProperty)\r\n    .filter(isGone(prevProps, nextProps))\r\n    .forEach(name => {\r\n      dom[name] = \"\"\r\n    })\r\n\r\n  // Set new or changed properties\r\n  Object.keys(nextProps)\r\n    .filter(isProperty)\r\n    .filter(isNew(prevProps, nextProps))\r\n    .forEach(name => {\r\n      dom[name] = nextProps[name]\r\n    })\r\n\r\n  // Add event listeners\r\n  Object.keys(nextProps)\r\n    .filter(isEvent)\r\n    .filter(isNew(prevProps, nextProps))\r\n    .forEach(name => {\r\n      const eventType = name\r\n        .toLowerCase()\r\n        .substring(2)\r\n      dom.addEventListener(\r\n        eventType,\r\n        nextProps[name]\r\n      )\r\n    })\r\n}\r\nfunction commitWork(fiber){\r\n  if(!fiber){\r\n    return\r\n  }\r\n  const domParent = fiber.parent.dom;\r\n  if (fiber.effectTag === \"PLACEMENT\" && fiber.dom != null) {\r\n    domParent.appendChild(fiber.dom)\r\n  } else if (fiber.effectTag === \"UPDATE\" && fiber.dom != null) {\r\n    updateDom(\r\n      fiber.dom,\r\n      fiber.alternate.props,\r\n      fiber.props\r\n    )\r\n  } else if (fiber.effectTag === \"DELETION\") {\r\n    domParent.removeChild(fiber.dom)\r\n  }\r\n  commitWork(fiber.child)\r\n  commitWork(fiber.sibling)\r\n}\r\n\r\nfunction workLoop(deadline) {\r\n  let shouldYield = false\r\n  while (nextUnitOfWork && !shouldYield) {\r\n    nextUnitOfWork = performUnitOfWork(nextUnitOfWork)\r\n    shouldYield = deadline.timeRemaining() < 1\r\n  }\r\n  if(!nextUnitOfWork && wipRoot){\r\n    commitRoot()\r\n  }\r\n  requestIdleCallback(workLoop)\r\n}\r\n\r\nrequestIdleCallback(workLoop)\r\nfunction reconcileChildren(wipFiber, elements) {\r\n  let index = 0\r\n  let oldFiber =\r\n      wipFiber.alternate && wipFiber.alternate.child\r\n  let prevSibling = null\r\n\r\n  while (index < elements.length || oldFiber != null) {\r\n    const element = elements[index]\r\n    let newFiber = null\r\n\r\n    const sameType = oldFiber && element && element.type == oldFiber.type\r\n\r\n    if (sameType) {\r\n      newFiber = {\r\n        type: oldFiber.type,\r\n        props: element.props,\r\n        dom: oldFiber.dom,\r\n        parent: wipFiber,\r\n        alternate: oldFiber,\r\n        effectTag: \"UPDATE\",\r\n      }\r\n    }\r\n    if (element && !sameType) {\r\n      newFiber = {\r\n        type: element.type,\r\n        props: element.props,\r\n        dom: null,\r\n        parent: wipFiber,\r\n        alternate: null,\r\n        effectTag: \"PLACEMENT\",\r\n      }\r\n    }\r\n    if (oldFiber && !sameType) {\r\n      oldFiber.effectTag = \"DELETION\"\r\n      deletions.push(oldFiber)\r\n    }\r\n\r\n    if (oldFiber) {\r\n      oldFiber = oldFiber.sibling\r\n    }\r\n\r\n    if (index === 0) {\r\n      wipFiber.child = newFiber\r\n    } else if (element) {\r\n      prevSibling.sibling = newFiber\r\n    }\r\n\r\n    prevSibling = newFiber\r\n    index++\r\n  }\r\n}\r\nfunction performUnitOfWork(fiber) {\r\n  // 第一步 根据fiber节点创建真实的dom节点，并保存在fiber.dom属性中\r\n  if(!fiber.dom){\r\n    fiber.dom = createDom(fiber)\r\n  }\r\n\r\n  // 第二步 将当前fiber节点的真实dom添加到父节点中，注意，这一步是会触发浏览器回流重绘的！！！\r\n  // if(fiber.parent){\r\n  //   fiber.parent.dom.appendChild(fiber.dom)\r\n  // }\r\n  // 第三步 给子元素创建对应的fiber节点\r\n  const children = fiber.props.children\r\n  reconcileChildren(fiber, children)\r\n\r\n  // 第四步，查找下一个工作单元\r\n  if(fiber.child){\r\n    return fiber.child\r\n  }\r\n  let nextFiber = fiber\r\n  while(nextFiber){\r\n    if(nextFiber.sibling){\r\n      return nextFiber.sibling\r\n    }\r\n    nextFiber = nextFiber.parent\r\n  }\r\n \r\n}\r\nconst MiniReact = {\r\n  createElement:  (type, props, ...children) => {\r\n    return {\r\n      type,\r\n      props: {\r\n        ...props,\r\n        children: children.map(child => {\r\n          if(typeof child === 'object'){\r\n            return child\r\n          }\r\n          return {\r\n            type: 'TEXT_ELEMENT',\r\n            props: {\r\n              nodeValue: child,\r\n              children: [],\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n  },\r\n  render\r\n}\r\n/** @jsx MiniReact.createElement */\r\nconst container = document.getElementById(\"root\")\r\n\r\nconst updateValue = e => {\r\n  rerender(e.target.value)\r\n}\r\n\r\nconst rerender = value => {\r\n  const element = (\r\n    <div>\r\n      <input onInput={updateValue} value={value} />\r\n      <h2>Hello {value}</h2>\r\n    </div>\r\n  )\r\n  MiniReact.render(element, container)\r\n}\r\n\r\nrerender(\"World\")"],"names":["nextUnitOfWork","wipRoot","currentRoot","deletions","isEvent","key","startsWith","isProperty","isNew","prev","next","isGone","updateDom","dom","prevProps","nextProps","Object","keys","filter","forEach","name","eventType","toLowerCase","substring","removeEventListener","addEventListener","commitWork","fiber","domParent","parent","effectTag","appendChild","alternate","props","removeChild","child","sibling","performUnitOfWork","type","document","createTextNode","createElement","createDom","wipFiber","elements","index","oldFiber","prevSibling","length","element","newFiber","sameType","push","reconcileChildren","children","nextFiber","requestIdleCallback","workLoop","deadline","shouldYield","timeRemaining","MiniReact","_len","arguments","Array","_key","_objectSpread","map","_typeof","nodeValue","container","getElementById","updateValue","e","rerender","target","value","onInput"],"sourceRoot":""}